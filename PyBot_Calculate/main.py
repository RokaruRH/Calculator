import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart, Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage

BOT_TOKEN = "7427838862:AAET4yjpqH6k8OYr4xzOkshDbZvTBo6Zpbo"
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

raid_sulfur_table = {
    "–î–µ—Ä–µ–≤—è–Ω–Ω–∞—è —Å—Ç–µ–Ω–∫–∞": {"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": 3, "–¢–∏–ø": "–°–∞—á–µ–ª—å", "–°–µ—Ä–∞": 1440},
    "–ö–∞–º–µ–Ω–Ω–∞—è —Å—Ç–µ–Ω–∫–∞": {"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": 2, "–¢–∏–ø": "–°4", "–°–µ—Ä–∞": 4400},
    "–ú–µ—Ç–∞–ª–ª —Å—Ç–µ–Ω–∞": {"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": 4, "–¢–∏–ø": "–°4", "–°–µ—Ä–∞": 8800},
    "–î–µ—Ä–µ–≤—è–Ω–Ω–∞—è –¥–≤–µ—Ä—å": {"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": 2, "–¢–∏–ø": "–°–∞—á–µ–ª—å", "–°–µ—Ä–∞": 960},
    "–ñ–µ–ª–µ–∑–Ω–∞—è –¥–≤–µ—Ä—å": {"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": 3, "–¢–∏–ø": "–°–∞—á–µ–ª—å", "–°–µ—Ä–∞": 1440},
    "–ì–∞—Ä–∞–∂–∫–∞": {"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": 3, "–¢–∏–ø": "–°4 + –†–∞–∫–µ—Ç—ã", "–°–µ—Ä–∞": 3600},
    "–ú–í–ö –¥–≤–µ—Ä—å": {"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": 3, "–¢–∏–ø": "–°4", "–°–µ—Ä–∞": 6600},
    "–¢—É—Ä–µ–ª—å": {"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": 4, "–¢–∏–ø": "–°–∫–æ—Ä–æ—Å—Ç–Ω—ã–µ —Ä–∞–∫–µ—Ç—ã", "–°–µ—Ä–∞": 400},
}

class RaidStates(StatesGroup):
    waiting_for_quantity = State()

def create_targets_keyboard():
    builder = InlineKeyboardBuilder()
    for target in raid_sulfur_table.keys():
        builder.add(InlineKeyboardButton(text=target, callback_data=f"target_{target}"))
    builder.adjust(2)
    return builder.as_markup()

def create_quantity_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", callback_data="qty_custom")
    ]])

@dp.message(CommandStart())
async def start_handler(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏ —Ü–µ–ª—å –¥–ª—è —Ä–∞–∑—Ä—É—à–µ–Ω–∏—è:", reply_markup=create_targets_keyboard())

@dp.message(Command("help"))
async def help_handler(message: types.Message):
    await message.answer("–ö–æ–º–∞–Ω–¥—ã:\n/start - –ù–∞—á–∞—Ç—å\n/targets - –ü–æ–∫–∞–∑–∞—Ç—å —Ü–µ–ª–∏\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å ‚Üí —É–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ ‚Üí –ø–æ–ª—É—á–∏—Ç–µ —Ä–∞—Å—á–µ—Ç")

@dp.message(Command("targets"))
async def targets_handler(message: types.Message):
    text = "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ü–µ–ª–∏:\n\n" + "\n".join([f"{target}: {info['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ']} {info['–¢–∏–ø']} ({info['–°–µ—Ä–∞']} —Å–µ—Ä—ã)"
                                               for target, info in raid_sulfur_table.items()])
    await message.answer(text)

@dp.callback_query(F.data.startswith("target_"))
async def target_selected(callback: CallbackQuery, state: FSMContext):
    target_name = callback.data.replace("target_", "")
    if target_name not in raid_sulfur_table:
        return await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ü–µ–ª—å!")

    await state.update_data(selected_target=target_name)
    info = raid_sulfur_table[target_name]
    text = f"–¶–µ–ª—å: {target_name}\n{info['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ']} {info['–¢–∏–ø']} = {info['–°–µ—Ä–∞']} —Å–µ—Ä—ã\n\n–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–µ–ª–µ–π:"
    await callback.message.edit_text(text, reply_markup=create_quantity_keyboard())
    await callback.answer()

@dp.callback_query(F.data == "qty_custom")
async def quantity_custom(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:")
    await state.set_state(RaidStates.waiting_for_quantity)
    await callback.answer()

@dp.callback_query(F.data == "new_calculation")
async def new_calculation(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏ —Ü–µ–ª—å –¥–ª—è —Ä–∞–∑—Ä—É—à–µ–Ω–∏—è:", reply_markup=create_targets_keyboard())
    await callback.answer()

@dp.message(RaidStates.waiting_for_quantity)
async def custom_quantity_handler(message: types.Message, state: FSMContext):
    try:
        quantity = int(message.text.strip())
        if quantity <= 0:
            return await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
        await process_calculation(message, state, quantity)
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")

async def process_calculation(message, state: FSMContext, quantity: int):
    data = await state.get_data()
    target_name = data.get('selected_target')

    if not target_name:
        return await message.answer("–û—à–∏–±–∫–∞: —Ü–µ–ª—å –Ω–µ –≤—ã–±—Ä–∞–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ /start")

    info = raid_sulfur_table[target_name]
    total_charges = info['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'] * quantity
    total_sulfur = info['–°–µ—Ä–∞'] * quantity

    result = f"–†–∞—Å—á–µ—Ç –¥–ª—è {quantity}x {target_name}:\n\n"
    result += f"–ó–∞—Ä—è–¥–æ–≤ ({info['–¢–∏–ø']}): {total_charges}\n"
    result += f"–°–µ—Ä—ã: {total_sulfur}\n\n"

    # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
    materials = {
        "–°4": f"–ú–µ—Ç–∞–ª–ª —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤: {total_charges * 20}\n–ù–∏–∑–∫–æ—Å–æ—Ä—Ç–Ω–æ–µ —Ç–æ–ø–ª–∏–≤–æ: {total_charges * 30}",
        "–°–∞—á–µ–ª—å": f"–¢–∫–∞–Ω—å: {total_charges * 10}\n–ë–æ–±–æ–≤—ã–µ –±–∞–Ω–∫–∏: {total_charges * 4}",
        "–°–∫–æ—Ä–æ—Å—Ç–Ω—ã–µ —Ä–∞–∫–µ—Ç—ã": f"–ú–µ—Ç–∞–ª–ª —Ç—Ä—É–±—ã: {total_charges * 2}\n–í–∑—Ä—ã–≤—á–∞—Ç–∫–∞: {total_charges * 10}"
    }

    for material_type, material_info in materials.items():
        if material_type in info['–¢–∏–ø']:
            result += material_info + "\n"

    keyboard = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="–ù–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç", callback_data="new_calculation")
    ]])

    await message.answer(result, reply_markup=keyboard)
    await state.clear()

@dp.message()
async def unknown_message(message: types.Message):
    await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π /start")

async def main():
    print("ü§ñ Rust Raid Calculator Bot –∑–∞–ø—É—â–µ–Ω!")
    try:
        await dp.start_polling(bot)
    except KeyboardInterrupt:
        print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    finally:
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(main())
