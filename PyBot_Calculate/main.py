import asyncio
import logging
import os
import random
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart, Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
BOT_TOKEN = os.getenv('BOT_TOKEN')

# –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ .env, –ø–æ–ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã
if not BOT_TOKEN:
    print("‚ö†Ô∏è BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
    print("–ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –Ω–∞–ø—Ä—è–º—É—é...")
    # –†–µ–∑–µ—Ä–≤–Ω—ã–π —Ç–æ–∫–µ–Ω (–≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ)
    BOT_TOKEN = "7427838862:AAET4yjpqH6k8OYr4xzOkshDbZvTBo6Zpbo"

    if not BOT_TOKEN:
        print("‚ùå –û—à–∏–±–∫–∞: BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞ —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º:")
        print("BOT_TOKEN=7427838862:AAET4yjpqH6k8OYr4xzOkshDbZvTBo6Zpbo")
        exit(1)
    else:
        print("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä–µ–∑–µ—Ä–≤–Ω—ã–π —Ç–æ–∫–µ–Ω")

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
if not isinstance(BOT_TOKEN, str) or not BOT_TOKEN.strip():
    print(f"‚ùå –û—à–∏–±–∫–∞: BOT_TOKEN –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π, –ø–æ–ª—É—á–µ–Ω: {type(BOT_TOKEN)}")
    exit(1)

print(f"‚úÖ –¢–æ–∫–µ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ: {BOT_TOKEN[:10]}...{BOT_TOKEN[-10:]}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
try:
    bot = Bot(token=BOT_TOKEN)
    storage = MemoryStorage()
    dp = Dispatcher(storage=storage)
    print("‚úÖ –ë–æ—Ç –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}")
    exit(1)

# –¢–∞–±–ª–∏—Ü–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–π–¥–∞
raid_sulfur_table = {
    "–î–µ—Ä–µ–≤—è–Ω–Ω–∞—è —Å—Ç–µ–Ω–∫–∞": {"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": 3, "–¢–∏–ø": "–°–∞—á–µ–ª—å", "–°–µ—Ä–∞": 480*3},
    "–ö–∞–º–µ–Ω–Ω–∞—è —Å—Ç–µ–Ω–∫–∞": {"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": 2, "–¢–∏–ø": "–°4", "–°–µ—Ä–∞": 2200*2},
    "–ú–µ—Ç–∞–ª–ª —Å—Ç–µ–Ω–∞": {"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": 4, "–¢–∏–ø": "–°4", "–°–µ—Ä–∞": 2200*4},
    "–î–µ—Ä–µ–≤—è–Ω–Ω–∞—è –¥–≤–µ—Ä—å": {"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": 2, "–¢–∏–ø": "–°–∞—á–µ–ª—å", "–°–µ—Ä–∞": 480*2},
    "–ñ–µ–ª–µ–∑–Ω–∞—è –¥–≤–µ—Ä—å": {"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": 3, "–¢–∏–ø": "–°–∞—á–µ–ª—å", "–°–µ—Ä–∞": 480*3},
    "–ì–∞—Ä–∞–∂–∫–∞": {"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": 3, "–¢–∏–ø": "–°4 + –†–∞–∫–µ—Ç—ã", "–°–µ—Ä–∞": 1400+2200},
    "–ú–í–ö –¥–≤–µ—Ä—å": {"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": 3, "–¢–∏–ø": "–°4", "–°–µ—Ä–∞": 2200*3},
    "–¢—É—Ä–µ–ª—å": {"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": 4, "–¢–∏–ø": "–°–∫–æ—Ä–æ—Å—Ç–Ω—ã–µ —Ä–∞–∫–µ—Ç—ã", "–°–µ—Ä–∞": 100*4},
}

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class RaidStates(StatesGroup):
    waiting_for_quantity = State()

# –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–∏ - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
MONETIZATION_CONFIG = {
    "enabled": True,
    "show_ads_every": 3,  # –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ä–µ–∫–ª–∞–º—É –∫–∞–∂–¥—ã–µ 3 —Ä–∞—Å—á–µ—Ç–∞
    "donation_link": "https://example.com/donate",  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Å–∞–π—Ç
    "crypto_wallets": {
        "bitcoin": "bc1qxy2kgdygjrsqtzq2n0yrf2493p83kkfjhx0wlh",  # –ü—Ä–∏–º–µ—Ä BTC –∞–¥—Ä–µ—Å–∞
        "ethereum": "0x742d35Cc6634C0532925a3b8D4fB00000000000",  # –ü—Ä–∏–º–µ—Ä ETH –∞–¥—Ä–µ—Å–∞
        "usdt_trc20": "TLrADxfy123456789abcdefghijklmnop",  # –ü—Ä–∏–º–µ—Ä USDT TRC20
        "ton": "EQD1234567890abcdef1234567890abcdef12345678"  # –ü—Ä–∏–º–µ—Ä TON –∞–¥—Ä–µ—Å–∞
    }
}

# –°—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –¥–ª—è —Ä–µ–∫–ª–∞–º—ã
user_usage_count = {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å —Ü–µ–ª—è–º–∏
def create_targets_keyboard():
    builder = InlineKeyboardBuilder()
    for target in raid_sulfur_table.keys():
        builder.add(InlineKeyboardButton(
            text=target,
            callback_data=f"target_{target}"
        ))
    builder.adjust(2)  # –ü–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
    return builder.as_markup()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–æ–Ω–∞—Ç–æ–≤
def create_donation_keyboard():
    builder = InlineKeyboardBuilder()

    # –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å–∞–π—Ç
    builder.add(InlineKeyboardButton(
        text="üíé –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç",
        url=MONETIZATION_CONFIG["donation_link"]
    ))

    # –ö–Ω–æ–ø–∫–∏ —Å –∫—Ä–∏–ø—Ç–æ–∫–æ—à–µ–ª—å–∫–∞–º–∏
    builder.add(InlineKeyboardButton(
        text="‚Çø Bitcoin",
        callback_data="wallet_bitcoin"
    ))
    builder.add(InlineKeyboardButton(
        text="Œû Ethereum",
        callback_data="wallet_ethereum"
    ))
    builder.add(InlineKeyboardButton(
        text="‚ÇÆ USDT",
        callback_data="wallet_usdt_trc20"
    ))
    builder.add(InlineKeyboardButton(
        text="üíé TON",
        callback_data="wallet_ton"
    ))

    # –ö–Ω–æ–ø–∫–∞ "–ó–∞–∫—Ä—ã—Ç—å"
    builder.add(InlineKeyboardButton(
        text="‚ùå –ó–∞–∫—Ä—ã—Ç—å",
        callback_data="close_donation"
    ))

    builder.adjust(1, 2, 2, 1)  # –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
    return builder.as_markup()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∫–ª–∞–º–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def create_ad_keyboard():
    builder = InlineKeyboardBuilder()

    builder.add(InlineKeyboardButton(
        text="üíé –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞",
        url=MONETIZATION_CONFIG["donation_link"]
    ))
    builder.add(InlineKeyboardButton(
        text="üéØ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞—Å—á–µ—Ç",
        callback_data="continue_calculation"
    ))

    builder.adjust(1)
    return builder.as_markup()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞–º–∏
def create_quantity_keyboard():
    builder = InlineKeyboardBuilder()
    quantities = [1, 2, 3, 4, 5, 10]
    for qty in quantities:
        builder.add(InlineKeyboardButton(
            text=str(qty),
            callback_data=f"qty_{qty}"
        ))
    builder.add(InlineKeyboardButton(
        text="–î—Ä—É–≥–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ",
        callback_data="qty_custom"
    ))
    builder.adjust(3)  # –ü–æ 3 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
    return builder.as_markup()

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(CommandStart())
async def start_handler(message: types.Message):
    welcome_text = (
        "üí£ **–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ä–µ–π–¥–∞ Rust –ø–æ —Å–µ—Ä–µ**\n\n"
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Ä—ã –¥–ª—è —Ä–µ–π–¥–∞.\n\n"
        "üéØ –í—ã–±–µ—Ä–∏ —Ü–µ–ª—å –¥–ª—è —Ä–∞–∑—Ä—É—à–µ–Ω–∏—è:\n\n"
        "üí° *–ï—Å–ª–∏ –±–æ—Ç —Ç–µ–±–µ –ø–æ–º–æ–≥–∞–µ—Ç, –º–æ–∂–µ—à—å –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞* /donate"
    )

    await message.answer(
        welcome_text,
        reply_markup=create_targets_keyboard(),
        parse_mode="Markdown"
    )

# –ö–æ–º–∞–Ω–¥–∞ /help
@dp.message(Command("help"))
async def help_handler(message: types.Message):
    help_text = (
        "üÜò **–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É**\n\n"
        "**–ö–æ–º–∞–Ω–¥—ã:**\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
        "/targets - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ü–µ–ª–∏\n"
        "/donate - –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞\n\n"
        "**–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**\n"
        "1. –í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å –¥–ª—è —Ä–∞–∑—Ä—É—à–µ–Ω–∏—è\n"
        "2. –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–µ–ª–µ–π\n"
        "3. –ü–æ–ª—É—á–∏—Ç–µ —Ä–∞—Å—á–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤\n\n"
        "üí° **–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞:**\n"
        "–ë–æ—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π, –Ω–æ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä–µ–±—É–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –∏ —Ä–µ—Å—É—Ä—Å–æ–≤.\n"
        "–ï—Å–ª–∏ –æ–Ω —Ç–µ–±–µ –ø–æ–º–æ–≥–∞–µ—Ç - –º–æ–∂–µ—à—å –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç!\n\n"
        "–£–¥–∞—á–Ω–æ–≥–æ —Ä–µ–π–¥–∞! üéØ"
    )
    await message.answer(help_text, parse_mode="Markdown")

# –ö–æ–º–∞–Ω–¥–∞ /donate - –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏—è
@dp.message(Command("donate"))
async def donate_handler(message: types.Message):
    donate_text = (
        "üíù **–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞**\n\n"
        "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ —Ö–æ—á–µ—à—å –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞!\n\n"
        "üéØ **–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥ —Ç–µ–±–µ:**\n"
        "‚Ä¢ –°—ç–∫–æ–Ω–æ–º–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞ —Ä–∞—Å—á–µ—Ç–∞—Ö\n"
        "‚Ä¢ –°–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —É—Å–ø–µ—à–Ω—ã–µ —Ä–µ–π–¥—ã\n"
        "‚Ä¢ –ò–∑–±–µ–∂–∞—Ç—å –Ω–µ—Ö–≤–∞—Ç–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤\n\n"
        "üíé **–°–ø–æ—Å–æ–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏:**\n"
        "‚Ä¢ –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ –Ω–∞—à —Å–∞–π—Ç –¥–ª—è –¥–æ–Ω–∞—Ç–∞\n"
        "‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É\n"
        "‚Ä¢ –†–∞—Å—Å–∫–∞–∑–∞—Ç—å –¥—Ä—É–∑—å—è–º –æ –±–æ—Ç–µ\n\n"
        "–õ—é–±–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–æ–º–æ–∂–µ—Ç —Ä–∞–∑–≤–∏–≤–∞—Ç—å –ø—Ä–æ–µ–∫—Ç –¥–∞–ª—å—à–µ! üöÄ"
    )

    await message.answer(
        donate_text,
        reply_markup=create_donation_keyboard(),
        parse_mode="Markdown"
    )

# –ö–æ–º–∞–Ω–¥–∞ /targets
@dp.message(Command("targets"))
async def targets_handler(message: types.Message):
    targets_text = "üéØ **–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ü–µ–ª–∏ –¥–ª—è —Ä–µ–π–¥–∞:**\n\n"
    for i, (target, info) in enumerate(raid_sulfur_table.items(), 1):
        targets_text += f"{i}. **{target}**\n"
        targets_text += f"   ‚Ä¢ {info['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ']} {info['–¢–∏–ø']}\n"
        targets_text += f"   ‚Ä¢ {info['–°–µ—Ä–∞']} —Å–µ—Ä—ã\n\n"

    await message.answer(targets_text, parse_mode="Markdown")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ü–µ–ª–∏
@dp.callback_query(F.data.startswith("target_"))
async def target_selected(callback: CallbackQuery, state: FSMContext):
    target_name = callback.data.replace("target_", "")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ü–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(selected_target=target_name)

    info = raid_sulfur_table[target_name]

    message_text = (
        f"üîé **–í—ã–±—Ä–∞–Ω–∞ —Ü–µ–ª—å: {target_name}**\n\n"
        f"**–ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**\n"
        f"‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—Ä—è–¥–æ–≤: {info['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ']} ({info['–¢–∏–ø']})\n"
        f"‚Ä¢ –¢—Ä–µ–±—É–µ–º–∞—è —Å–µ—Ä–∞: {info['–°–µ—Ä–∞']} –µ–¥–∏–Ω–∏—Ü\n\n"
        f"**–°–∫–æ–ª—å–∫–æ —Ç–∞–∫–∏—Ö —Ü–µ–ª–µ–π —Ö–æ—á–µ—à—å —Ä–∞–∑—Ä—É—à–∏—Ç—å?**"
    )

    await callback.message.edit_text(
        message_text,
        reply_markup=create_quantity_keyboard(),
        parse_mode="Markdown"
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
@dp.callback_query(F.data.startswith("qty_"))
async def quantity_selected(callback: CallbackQuery, state: FSMContext):
    if callback.data == "qty_custom":
        await callback.message.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–µ–ª–µ–π (—á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0):",
            reply_markup=None
        )
        await state.set_state(RaidStates.waiting_for_quantity)
        await callback.answer()
        return

    quantity = int(callback.data.replace("qty_", ""))
    await process_calculation(callback.message, state, quantity, callback)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
@dp.message(RaidStates.waiting_for_quantity)
async def custom_quantity_handler(message: types.Message, state: FSMContext):
    try:
        quantity = int(message.text.strip())
        if quantity <= 0:
            await message.answer("‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:")
            return

        await process_calculation(message, state, quantity)

    except ValueError:
        await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–∫–∞–∑–∞ —Ä–µ–∫–ª–∞–º—ã
def should_show_ad(user_id: int) -> bool:
    if not MONETIZATION_CONFIG["enabled"]:
        return False

    count = user_usage_count.get(user_id, 0)
    return count > 0 and count % MONETIZATION_CONFIG["show_ads_every"] == 0

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def increment_user_count(user_id: int):
    user_usage_count[user_id] = user_usage_count.get(user_id, 0) + 1

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ä–µ–∫–ª–∞–º—ã
async def show_advertisement(message, user_id: int):
    ads = [
        "üéØ **–ù—Ä–∞–≤–∏—Ç—Å—è –±–æ—Ç?**\n\n–ü–æ–¥–¥–µ—Ä–∂–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∏ –ø–æ–ª—É—á–∏ –µ—â–µ –±–æ–ª—å—à–µ –∫—Ä—É—Ç—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –≤ –±—É–¥—É—â–µ–º!",
        "üíé **–≠—Ç–æ—Ç –±–æ—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π!**\n\n–ù–æ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä–µ–±—É–µ—Ç –≤—Ä–µ–º–µ–Ω–∏. –¢–≤–æ—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–æ–º–æ–∂–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ —Ñ–∏—á–∏!",
        "üöÄ **–ü–æ–º–æ–≥ —Å —Ä–µ–π–¥–æ–º?**\n\n–ü–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫–æ–π —Å—É–º–º–æ–π - —ç—Ç–æ –æ—á–µ–Ω—å –º–æ—Ç–∏–≤–∏—Ä—É–µ—Ç!",
        "‚ö° **–°—ç–∫–æ–Ω–æ–º–∏–ª —Å–µ—Ä—É?**\n\n–ü–æ—Ç—Ä–∞—Ç—å –Ω–µ–º–Ω–æ–≥–æ –Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É –ø—Ä–æ–µ–∫—Ç–∞ - –±—É–¥–µ—Ç –µ—â–µ –±–æ–ª—å—à–µ –ø–æ–ª–µ–∑–Ω—ã—Ö –±–æ—Ç–æ–≤!"
    ]

    ad_text = random.choice(ads)

    await message.answer(
        ad_text,
        reply_markup=create_ad_keyboard(),
        parse_mode="Markdown"
    )
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞—Å—á–µ—Ç–∞
async def process_calculation(message, state: FSMContext, quantity: int, callback: CallbackQuery = None):
    data = await state.get_data()
    target_name = data.get('selected_target')
    user_id = message.chat.id if hasattr(message, 'chat') else callback.from_user.id

    if not target_name:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: —Ü–µ–ª—å –Ω–µ –≤—ã–±—Ä–∞–Ω–∞. –ù–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ —Å /start")
        return

    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
    increment_user_count(user_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∫–ª–∞–º—É
    if should_show_ad(user_id):
        if callback:
            await show_advertisement(callback.message, user_id)
        else:
            await show_advertisement(message, user_id)
        # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ—Å–Ω–æ–≤–Ω—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        await asyncio.sleep(2)

    info = raid_sulfur_table[target_name]

    # –í—ã—á–∏—Å–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    total_charges = info['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'] * quantity
    total_sulfur = info['–°–µ—Ä–∞'] * quantity

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    result_text = (
        f"üßÆ **–†–∞—Å—á–µ—Ç –¥–ª—è {quantity}x {target_name}:**\n\n"
        f"**–û—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã:**\n"
        f"‚Ä¢ –ó–∞—Ä—è–¥–æ–≤ ({info['–¢–∏–ø']}): {total_charges}\n"
        f"‚Ä¢ –°–µ—Ä—ã: {total_sulfur} –µ–¥–∏–Ω–∏—Ü\n\n"
    )

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ—Å—É—Ä—Å–∞—Ö
    result_text += "**–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã:**\n"
    if "–°4" in info['–¢–∏–ø']:
        result_text += f"‚Ä¢ –ú–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏—Ö —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤: {total_charges * 20}\n"
        result_text += f"‚Ä¢ –ù–∏–∑–∫–æ—Å–æ—Ä—Ç–Ω–æ–≥–æ —Ç–æ–ø–ª–∏–≤–∞: {total_charges * 30}\n"
    elif "–°–∞—á–µ–ª—å" in info['–¢–∏–ø']:
        result_text += f"‚Ä¢ –¢–∫–∞–Ω–∏: {total_charges * 10}\n"
        result_text += f"‚Ä¢ –ë–æ–±–æ–≤—ã—Ö –±–∞–Ω–æ–∫: {total_charges * 4}\n"
    elif "–°–∫–æ—Ä–æ—Å—Ç–Ω—ã–µ —Ä–∞–∫–µ—Ç—ã" in info['–¢–∏–ø']:
        result_text += f"‚Ä¢ –ú–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏—Ö —Ç—Ä—É–±: {total_charges * 2}\n"
        result_text += f"‚Ä¢ –í–∑—Ä—ã–≤—á–∞—Ç–∫–∏: {total_charges * 10}\n"

    result_text += "\nüéØ –£–¥–∞—á–Ω–æ–≥–æ —Ä–µ–π–¥–∞!"

    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å–ª—É—á–∞—è—Ö
    if user_usage_count.get(user_id, 0) % 5 == 0:
        result_text += "\n\nüí° *–ë–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç? –ü–æ–¥–¥–µ—Ä–∂–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞* /donate"

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÑ –ù–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç", callback_data="new_calculation")]
    ])

    if callback:
        await callback.message.edit_text(result_text, reply_markup=keyboard, parse_mode="Markdown")
        await callback.answer()
    else:
        await message.answer(result_text, reply_markup=keyboard, parse_mode="Markdown")

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–∏

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –∫—Ä–∏–ø—Ç–æ–∫–æ—à–µ–ª—å–∫–æ–≤
@dp.callback_query(F.data.startswith("wallet_"))
async def wallet_handler(callback: CallbackQuery):
    wallet_type = callback.data.replace("wallet_", "")
    wallet_address = MONETIZATION_CONFIG["crypto_wallets"].get(wallet_type)

    if not wallet_address:
        await callback.answer("‚ùå –ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    wallet_names = {
        "bitcoin": "Bitcoin (BTC)",
        "ethereum": "Ethereum (ETH)",
        "usdt_trc20": "USDT TRC20",
        "ton": "TON"
    }

    wallet_text = (
        f"üí∞ **{wallet_names.get(wallet_type, wallet_type.upper())}**\n\n"
        f"**–ê–¥—Ä–µ—Å –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:**\n"
        f"`{wallet_address}`\n\n"
        f"**–ö–∞–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å:**\n"
        f"1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∞–¥—Ä–µ—Å –≤—ã—à–µ\n"
        f"2. –û—Ç–∫—Ä–æ–π—Ç–µ —Å–≤–æ–π –∫–æ—à–µ–ª–µ–∫\n"
        f"3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±—É—é —Å—É–º–º—É\n"
        f"4. –ù–∞–ø–∏—à–∏—Ç–µ @username_bot —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏\n\n"
        f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É! üôè"
    )

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∞–¥—Ä–µ—Å–∞
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∞–¥—Ä–µ—Å", callback_data=f"copy_{wallet_type}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="show_donation_menu")]
    ])

    await callback.message.edit_text(wallet_text, reply_markup=keyboard, parse_mode="Markdown")
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∞–¥—Ä–µ—Å–∞
@dp.callback_query(F.data.startswith("copy_"))
async def copy_wallet_handler(callback: CallbackQuery):
    wallet_type = callback.data.replace("copy_", "")
    wallet_address = MONETIZATION_CONFIG["crypto_wallets"].get(wallet_type)

    if wallet_address:
        await callback.answer(f"–ê–¥—Ä–µ—Å —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: {wallet_address}", show_alert=True)
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è")

# –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –¥–æ–Ω–∞—Ç–∞
@dp.callback_query(F.data == "show_donation_menu")
async def show_donation_menu(callback: CallbackQuery):
    donate_text = (
        "üíù **–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞**\n\n"
        "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ —Ö–æ—á–µ—à—å –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞!\n\n"
        "üíé **–°–ø–æ—Å–æ–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏:**\n"
        "‚Ä¢ –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ –Ω–∞—à —Å–∞–π—Ç –¥–ª—è –¥–æ–Ω–∞—Ç–∞\n"
        "‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É\n"
        "‚Ä¢ –†–∞—Å—Å–∫–∞–∑–∞—Ç—å –¥—Ä—É–∑—å—è–º –æ –±–æ—Ç–µ\n\n"
        "–õ—é–±–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–æ–º–æ–∂–µ—Ç —Ä–∞–∑–≤–∏–≤–∞—Ç—å –ø—Ä–æ–µ–∫—Ç –¥–∞–ª—å—à–µ! üöÄ"
    )

    await callback.message.edit_text(
        donate_text,
        reply_markup=create_donation_keyboard(),
        parse_mode="Markdown"
    )
    await callback.answer()

# –ó–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é –¥–æ–Ω–∞—Ç–∞
@dp.callback_query(F.data == "close_donation")
async def close_donation_handler(callback: CallbackQuery):
    await callback.message.edit_text(
        "üí£ **–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ä–µ–π–¥–∞ Rust**\n\n"
        "–í—ã–±–µ—Ä–∏ —Ü–µ–ª—å –¥–ª—è —Ä–∞–∑—Ä—É—à–µ–Ω–∏—è:",
        reply_markup=create_targets_keyboard(),
        parse_mode="Markdown"
    )
    await callback.answer()

# –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ—Å–ª–µ —Ä–µ–∫–ª–∞–º—ã
@dp.callback_query(F.data == "continue_calculation")
async def continue_calculation_handler(callback: CallbackQuery):
    await callback.message.delete()
    await callback.answer("–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º! üéØ")
@dp.callback_query(F.data == "new_calculation")
async def new_calculation(callback: CallbackQuery):
    await callback.message.edit_text(
        "üí£ **–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ä–µ–π–¥–∞ Rust –ø–æ —Å–µ—Ä–µ**\n\n"
        "–í—ã–±–µ—Ä–∏ —Ü–µ–ª—å –¥–ª—è —Ä–∞–∑—Ä—É—à–µ–Ω–∏—è:",
        reply_markup=create_targets_keyboard(),
        parse_mode="Markdown"
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def unknown_message(message: types.Message):
    await message.answer(
        "‚ùì –ù–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –∏–ª–∏ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏."
    )

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    print("ü§ñ Rust Raid Calculator Bot –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    print(f"üîë –¢–æ–∫–µ–Ω: {'‚úÖ –ù–∞–π–¥–µ–Ω' if BOT_TOKEN else '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω'}")

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
        bot_info = await bot.get_me()
        print(f"üë§ –ë–æ—Ç @{bot_info.username} –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        print("üì± –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –Ω–∞–π—Ç–∏ –±–æ—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å /start")
        print("üîÑ –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")

        await dp.start_polling(bot)
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
    finally:
        await bot.session.close()
        print("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == "__main__":
    asyncio.run(main())
