import asyncio
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart, Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π)
BOT_TOKEN = "7427838862:AAET4yjpqH6k8OYr4xzOkshDbZvTBo6Zpbo"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –¢–∞–±–ª–∏—Ü–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–π–¥–∞
raid_sulfur_table = {
    "–î–µ—Ä–µ–≤—è–Ω–Ω–∞—è —Å—Ç–µ–Ω–∫–∞": {"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": 3, "–¢–∏–ø": "–°–∞—á–µ–ª—å", "–°–µ—Ä–∞": 480*3},
    "–ö–∞–º–µ–Ω–Ω–∞—è —Å—Ç–µ–Ω–∫–∞": {"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": 2, "–¢–∏–ø": "–°4", "–°–µ—Ä–∞": 2200*2},
    "–ú–µ—Ç–∞–ª–ª —Å—Ç–µ–Ω–∞": {"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": 4, "–¢–∏–ø": "–°4", "–°–µ—Ä–∞": 2200*4},
    "–î–µ—Ä–µ–≤—è–Ω–Ω–∞—è –¥–≤–µ—Ä—å": {"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": 2, "–¢–∏–ø": "–°–∞—á–µ–ª—å", "–°–µ—Ä–∞": 480*2},
    "–ñ–µ–ª–µ–∑–Ω–∞—è –¥–≤–µ—Ä—å": {"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": 3, "–¢–∏–ø": "–°–∞—á–µ–ª—å", "–°–µ—Ä–∞": 480*3},
    "–ì–∞—Ä–∞–∂–∫–∞": {"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": 3, "–¢–∏–ø": "–°4 + –†–∞–∫–µ—Ç—ã", "–°–µ—Ä–∞": 1400+2200},
    "–ú–í–ö –¥–≤–µ—Ä—å": {"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": 3, "–¢–∏–ø": "–°4", "–°–µ—Ä–∞": 2200*3},
    "–¢—É—Ä–µ–ª—å": {"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": 4, "–¢–∏–ø": "–°–∫–æ—Ä–æ—Å—Ç–Ω—ã–µ —Ä–∞–∫–µ—Ç—ã", "–°–µ—Ä–∞": 100*4},
}

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class RaidStates(StatesGroup):
    waiting_for_quantity = State()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å —Ü–µ–ª—è–º–∏
def create_targets_keyboard():
    builder = InlineKeyboardBuilder()
    for target in raid_sulfur_table.keys():
        builder.add(InlineKeyboardButton(
            text=target,
            callback_data=f"target_{target}"
        ))
    builder.adjust(2)  # –ü–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
    return builder.as_markup()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞–º–∏
def create_quantity_keyboard():
    builder = InlineKeyboardBuilder()
    quantities = [1, 2, 3, 4, 5, 10]
    for qty in quantities:
        builder.add(InlineKeyboardButton(
            text=str(qty),
            callback_data=f"qty_{qty}"
        ))
    builder.add(InlineKeyboardButton(
        text="–î—Ä—É–≥–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ",
        callback_data="qty_custom"
    ))
    builder.adjust(3)  # –ü–æ 3 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
    return builder.as_markup()

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(CommandStart())
async def start_handler(message: types.Message):
    await message.answer(
        "üí£ **–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ä–µ–π–¥–∞ Rust –ø–æ —Å–µ—Ä–µ**\n\n"
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Ä—ã –¥–ª—è —Ä–µ–π–¥–∞.\n\n"
        "–í—ã–±–µ—Ä–∏ —Ü–µ–ª—å –¥–ª—è —Ä–∞–∑—Ä—É—à–µ–Ω–∏—è:",
        reply_markup=create_targets_keyboard(),
        parse_mode="Markdown"
    )

# –ö–æ–º–∞–Ω–¥–∞ /help
@dp.message(Command("help"))
async def help_handler(message: types.Message):
    help_text = (
        "üÜò **–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É**\n\n"
        "**–ö–æ–º–∞–Ω–¥—ã:**\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
        "/targets - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ü–µ–ª–∏\n\n"
        "**–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**\n"
        "1. –í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å –¥–ª—è —Ä–∞–∑—Ä—É—à–µ–Ω–∏—è\n"
        "2. –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–µ–ª–µ–π\n"
        "3. –ü–æ–ª—É—á–∏—Ç–µ —Ä–∞—Å—á–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤\n\n"
        "–£–¥–∞—á–Ω–æ–≥–æ —Ä–µ–π–¥–∞! üéØ"
    )
    await message.answer(help_text, parse_mode="Markdown")

# –ö–æ–º–∞–Ω–¥–∞ /targets
@dp.message(Command("targets"))
async def targets_handler(message: types.Message):
    targets_text = "üéØ **–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ü–µ–ª–∏ –¥–ª—è —Ä–µ–π–¥–∞:**\n\n"
    for i, (target, info) in enumerate(raid_sulfur_table.items(), 1):
        targets_text += f"{i}. **{target}**\n"
        targets_text += f"   ‚Ä¢ {info['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ']} {info['–¢–∏–ø']}\n"
        targets_text += f"   ‚Ä¢ {info['–°–µ—Ä–∞']} —Å–µ—Ä—ã\n\n"

    await message.answer(targets_text, parse_mode="Markdown")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ü–µ–ª–∏
@dp.callback_query(F.data.startswith("target_"))
async def target_selected(callback: CallbackQuery, state: FSMContext):
    target_name = callback.data.replace("target_", "")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ü–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(selected_target=target_name)

    info = raid_sulfur_table[target_name]

    message_text = (
        f"üîé **–í—ã–±—Ä–∞–Ω–∞ —Ü–µ–ª—å: {target_name}**\n\n"
        f"**–ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**\n"
        f"‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—Ä—è–¥–æ–≤: {info['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ']} ({info['–¢–∏–ø']})\n"
        f"‚Ä¢ –¢—Ä–µ–±—É–µ–º–∞—è —Å–µ—Ä–∞: {info['–°–µ—Ä–∞']} –µ–¥–∏–Ω–∏—Ü\n\n"
        f"**–°–∫–æ–ª—å–∫–æ —Ç–∞–∫–∏—Ö —Ü–µ–ª–µ–π —Ö–æ—á–µ—à—å —Ä–∞–∑—Ä—É—à–∏—Ç—å?**"
    )

    await callback.message.edit_text(
        message_text,
        reply_markup=create_quantity_keyboard(),
        parse_mode="Markdown"
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
@dp.callback_query(F.data.startswith("qty_"))
async def quantity_selected(callback: CallbackQuery, state: FSMContext):
    if callback.data == "qty_custom":
        await callback.message.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–µ–ª–µ–π (—á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0):",
            reply_markup=None
        )
        await state.set_state(RaidStates.waiting_for_quantity)
        await callback.answer()
        return

    quantity = int(callback.data.replace("qty_", ""))
    await process_calculation(callback.message, state, quantity, callback)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
@dp.message(RaidStates.waiting_for_quantity)
async def custom_quantity_handler(message: types.Message, state: FSMContext):
    try:
        quantity = int(message.text.strip())
        if quantity <= 0:
            await message.answer("‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:")
            return

        await process_calculation(message, state, quantity)

    except ValueError:
        await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞—Å—á–µ—Ç–∞
async def process_calculation(message, state: FSMContext, quantity: int, callback: CallbackQuery = None):
    data = await state.get_data()
    target_name = data.get('selected_target')

    if not target_name:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: —Ü–µ–ª—å –Ω–µ –≤—ã–±—Ä–∞–Ω–∞. –ù–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ —Å /start")
        return

    info = raid_sulfur_table[target_name]

    # –í—ã—á–∏—Å–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    total_charges = info['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'] * quantity
    total_sulfur = info['–°–µ—Ä–∞'] * quantity

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    result_text = (
        f"üßÆ **–†–∞—Å—á–µ—Ç –¥–ª—è {quantity}x {target_name}:**\n\n"
        f"**–û—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã:**\n"
        f"‚Ä¢ –ó–∞—Ä—è–¥–æ–≤ ({info['–¢–∏–ø']}): {total_charges}\n"
        f"‚Ä¢ –°–µ—Ä—ã: {total_sulfur} –µ–¥–∏–Ω–∏—Ü\n\n"
    )

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ—Å—É—Ä—Å–∞—Ö
    result_text += "**–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã:**\n"
    if "–°4" in info['–¢–∏–ø']:
        result_text += f"‚Ä¢ –ú–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏—Ö —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤: {total_charges * 20}\n"
        result_text += f"‚Ä¢ –ù–∏–∑–∫–æ—Å–æ—Ä—Ç–Ω–æ–≥–æ —Ç–æ–ø–ª–∏–≤–∞: {total_charges * 30}\n"
    elif "–°–∞—á–µ–ª—å" in info['–¢–∏–ø']:
        result_text += f"‚Ä¢ –¢–∫–∞–Ω–∏: {total_charges * 10}\n"
        result_text += f"‚Ä¢ –ë–æ–±–æ–≤—ã—Ö –±–∞–Ω–æ–∫: {total_charges * 4}\n"
    elif "–°–∫–æ—Ä–æ—Å—Ç–Ω—ã–µ —Ä–∞–∫–µ—Ç—ã" in info['–¢–∏–ø']:
        result_text += f"‚Ä¢ –ú–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏—Ö —Ç—Ä—É–±: {total_charges * 2}\n"
        result_text += f"‚Ä¢ –í–∑—Ä—ã–≤—á–∞—Ç–∫–∏: {total_charges * 10}\n"

    result_text += "\nüéØ –£–¥–∞—á–Ω–æ–≥–æ —Ä–µ–π–¥–∞!"

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÑ –ù–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç", callback_data="new_calculation")]
    ])

    if callback:
        await callback.message.edit_text(result_text, reply_markup=keyboard, parse_mode="Markdown")
        await callback.answer()
    else:
        await message.answer(result_text, reply_markup=keyboard, parse_mode="Markdown")

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç"
@dp.callback_query(F.data == "new_calculation")
async def new_calculation(callback: CallbackQuery):
    await callback.message.edit_text(
        "üí£ **–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ä–µ–π–¥–∞ Rust –ø–æ —Å–µ—Ä–µ**\n\n"
        "–í—ã–±–µ—Ä–∏ —Ü–µ–ª—å –¥–ª—è —Ä–∞–∑—Ä—É—à–µ–Ω–∏—è:",
        reply_markup=create_targets_keyboard(),
        parse_mode="Markdown"
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def unknown_message(message: types.Message):
    await message.answer(
        "‚ùì –ù–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –∏–ª–∏ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏."
    )

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    try:
        await dp.start_polling(bot)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
    finally:
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(main())
